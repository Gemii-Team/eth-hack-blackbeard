from cdp import *
from dotenv import load_dotenv
import os

# ‡πÇ‡∏´‡∏•‡∏î API Key ‡∏à‡∏≤‡∏Å .env
load_dotenv()

api_key_name = os.getenv("CDP_API_KEY_NAME")
api_key_private_key = os.getenv("CDP_API_KEY_PRIVATE_KEY")

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SDK
Cdp.configure(api_key_name, api_key_private_key)
print("‚úÖ CDP SDK ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

# üîπ 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤
def create_wallet():
    wallet = Wallet.create()
    print(f"‚úÖ ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô: {wallet}")
    print(f"üìå ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏´‡∏•‡∏±‡∏Å: {wallet.default_address}")
    return wallet

# üîπ 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (Faucet)
def fund_wallet(wallet, token="eth"):
    faucet_tx = wallet.faucet(token)
    faucet_tx.wait()
    print(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° {token.upper()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {faucet_tx}")

# üîπ 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏≠‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
def transfer_funds(from_wallet, to_wallet, amount, currency="eth", gasless=False):
    transfer = from_wallet.transfer(amount, currency, to_wallet, gasless=gasless).wait()
    print(f"‚úÖ ‡πÇ‡∏≠‡∏ô {amount} {currency.upper()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {transfer}")

# üîπ 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
def list_transactions(wallet):
    transactions = wallet.default_address.transfers()
    print("üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°:")
    for tx in transactions:
        print(tx)

# üîπ 5. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (Swap Crypto)
def trade_crypto(wallet, amount, from_currency, to_currency):
    trade = wallet.trade(amount, from_currency, to_currency).wait()
    print(f"‚úÖ Swap {amount} {from_currency.upper()} ‚û° {to_currency.upper()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {trade}")

# üîπ 6. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Seed ‡πÅ‡∏•‡∏∞‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤
# üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Seed ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚úÖ)
def save_wallet_seed(wallet, file_path="wallet_seed.json"):
    wallet.save_seed_to_file(file_path, encrypt=True)  # ‚úÖ ‡πÉ‡∏ä‡πâ `save_seed_to_file()`
    print(f"‚úÖ Seed ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {file_path}")

# üîπ ‡πÇ‡∏´‡∏•‡∏î Seed ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚úÖ)
def load_wallet_seed(wallet_id, file_path="wallet_seed.json"):
    wallet = Wallet.fetch(wallet_id)  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤
    wallet.load_seed_from_file(file_path)  # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î seed ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤ wallet
    print(f"‚úÖ ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏ñ‡∏π‡∏Å‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {wallet}")
    return wallet

# üîπ 7. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Webhook
def create_webhook(wallet, callback_url):
    webhook = wallet.create_webhook(callback_url)
    print(f"‚úÖ Webhook ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô: {webhook}")

# üîπ 8. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ERC20 Transfer
def create_token_webhook(callback_url, from_address, network="base-mainnet"):
    from cdp.client.models.webhook import WebhookEventType, WebhookEventFilter
    webhook = Webhook.create(
        notification_uri=callback_url,
        event_type=WebhookEventType.ERC20_TRANSFER,
        event_filters=[WebhookEventFilter(from_address=from_address)],
        network_id=network
    )
    print(f"‚úÖ Webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ERC20 Transfer ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô: {webhook}")

# ‚úÖ 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤
wallet1 = create_wallet()

# ‚úÖ 2. ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (ETH)
fund_wallet(wallet1, "eth")

# ‚úÖ 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
wallet2 = create_wallet()

# ‚úÖ 4. ‡πÇ‡∏≠‡∏ô ETH ‡∏à‡∏≤‡∏Å wallet1 ‡πÑ‡∏õ wallet2
transfer_funds(wallet1, wallet2, 0.00001, "eth")

# ‚úÖ 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
list_transactions(wallet1)

# ‚úÖ 6. Swap ETH ‚û° USDC
# trade_crypto(wallet1, 0.00001, "eth", "usdc")

# ‚úÖ 7. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô Seed
# ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Seed
save_wallet_seed(wallet1, "wallet1_seed.json")

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
wallet_restored = load_wallet_seed(wallet1.id, "wallet1_seed.json")

# ‚úÖ 8. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Webhook
# create_webhook(wallet1, "https://your-app.com/callback")
